<?php

/**
 * BaseStoreTag
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $store_id
 * @property integer $tag_id
 * @property Store $Store
 * @property Tag $Tag
 * 
 * @method integer  getStoreId()  Returns the current record's "store_id" value
 * @method integer  getTagId()    Returns the current record's "tag_id" value
 * @method Store    getStore()    Returns the current record's "Store" value
 * @method Tag      getTag()      Returns the current record's "Tag" value
 * @method StoreTag setStoreId()  Sets the current record's "store_id" value
 * @method StoreTag setTagId()    Sets the current record's "tag_id" value
 * @method StoreTag setStore()    Sets the current record's "Store" value
 * @method StoreTag setTag()      Sets the current record's "Tag" value
 * 
 * @package    qhawpay
 * @subpackage model
 * @author     David Joan Tataje Mendoza <dtataje@qhawpay.pe>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStoreTag extends DoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('t_store_tag');
        $this->hasColumn('store_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'primary' => true,
             ));
        $this->hasColumn('tag_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'primary' => true,
             ));

        $this->option('symfony', array(
             'filter' => false,
             'form' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Store', array(
             'local' => 'store_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Tag', array(
             'local' => 'tag_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'updated' => 
             array(
              'disabled' => true,
             ),
             ));
        $this->actAs($timestampable0);
    }
}