<?php

/**
 * BaseCustomer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $realname
 * @property string $username
 * @property string $password
 * @property date $date_of_birth
 * @property string $gender
 * @property string $email
 * @property string $url
 * @property string $picture
 * @property string $about
 * @property string $twitter_username
 * @property string $phone
 * @property string $active
 * @property timestamp $last_access_at
 * @property string $facebook_id
 * @property string $email_hash
 * @property string $is_admin
 * @property Doctrine_Collection $Offers
 * @property Doctrine_Collection $Stores
 * @property Doctrine_Collection $Addresses
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method string              getRealname()         Returns the current record's "realname" value
 * @method string              getUsername()         Returns the current record's "username" value
 * @method string              getPassword()         Returns the current record's "password" value
 * @method date                getDateOfBirth()      Returns the current record's "date_of_birth" value
 * @method string              getGender()           Returns the current record's "gender" value
 * @method string              getEmail()            Returns the current record's "email" value
 * @method string              getUrl()              Returns the current record's "url" value
 * @method string              getPicture()          Returns the current record's "picture" value
 * @method string              getAbout()            Returns the current record's "about" value
 * @method string              getTwitterUsername()  Returns the current record's "twitter_username" value
 * @method string              getPhone()            Returns the current record's "phone" value
 * @method string              getActive()           Returns the current record's "active" value
 * @method timestamp           getLastAccessAt()     Returns the current record's "last_access_at" value
 * @method string              getFacebookId()       Returns the current record's "facebook_id" value
 * @method string              getEmailHash()        Returns the current record's "email_hash" value
 * @method string              getIsAdmin()          Returns the current record's "is_admin" value
 * @method Doctrine_Collection getOffers()           Returns the current record's "Offers" collection
 * @method Doctrine_Collection getStores()           Returns the current record's "Stores" collection
 * @method Doctrine_Collection getAddresses()        Returns the current record's "Addresses" collection
 * @method Customer            setId()               Sets the current record's "id" value
 * @method Customer            setRealname()         Sets the current record's "realname" value
 * @method Customer            setUsername()         Sets the current record's "username" value
 * @method Customer            setPassword()         Sets the current record's "password" value
 * @method Customer            setDateOfBirth()      Sets the current record's "date_of_birth" value
 * @method Customer            setGender()           Sets the current record's "gender" value
 * @method Customer            setEmail()            Sets the current record's "email" value
 * @method Customer            setUrl()              Sets the current record's "url" value
 * @method Customer            setPicture()          Sets the current record's "picture" value
 * @method Customer            setAbout()            Sets the current record's "about" value
 * @method Customer            setTwitterUsername()  Sets the current record's "twitter_username" value
 * @method Customer            setPhone()            Sets the current record's "phone" value
 * @method Customer            setActive()           Sets the current record's "active" value
 * @method Customer            setLastAccessAt()     Sets the current record's "last_access_at" value
 * @method Customer            setFacebookId()       Sets the current record's "facebook_id" value
 * @method Customer            setEmailHash()        Sets the current record's "email_hash" value
 * @method Customer            setIsAdmin()          Sets the current record's "is_admin" value
 * @method Customer            setOffers()           Sets the current record's "Offers" collection
 * @method Customer            setStores()           Sets the current record's "Stores" collection
 * @method Customer            setAddresses()        Sets the current record's "Addresses" collection
 * 
 * @package    qhawpay
 * @subpackage model
 * @author     David Joan Tataje Mendoza <dtataje@qhawpay.pe>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCustomer extends DoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('t_customer');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('realname', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             'notnull' => true,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'notnull' => true,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('date_of_birth', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('gender', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => true,
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('picture', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('about', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             ));
        $this->hasColumn('twitter_username', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('phone', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('active', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('last_access_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('facebook_id', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('email_hash', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('is_admin', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 'N',
             ));


        $this->index('i_username', array(
             'fields' => 
             array(
              0 => 'username',
             ),
             ));
        $this->index('u_email', array(
             'fields' => 
             array(
              0 => 'email',
             ),
             'type' => 'unique',
             ));
        $this->index('u_facebook_id', array(
             'fields' => 
             array(
              0 => 'facebook_id',
             ),
             'type' => 'unique',
             ));
        $this->index('i_url', array(
             'fields' => 
             array(
              0 => 'url',
             ),
             ));
        $this->index('i_twitter_username', array(
             'fields' => 
             array(
              0 => 'twitter_username',
             ),
             ));
        $this->index('i_active', array(
             'fields' => 
             array(
              0 => 'active',
             ),
             ));
        $this->index('i_gender', array(
             'fields' => 'gender',
             ));
        $this->index('i_is_admin', array(
             'fields' => 
             array(
              0 => 'is_admin',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => true,
             ));
        $this->option('boolean_columns', array(
             0 => 'active',
             1 => 'is_admin',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Offer as Offers', array(
             'local' => 'id',
             'foreign' => 'customer_id'));

        $this->hasMany('Store as Stores', array(
             'local' => 'id',
             'foreign' => 'customer_id'));

        $this->hasMany('Address as Addresses', array(
             'local' => 'id',
             'foreign' => 'customer_id'));

        $sluggableext0 = new Doctrine_Template_SluggableExt(array(
             'fields' => 
             array(
              0 => 'username',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($sluggableext0);
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}